<body>
    <header style="text-align: center; background-color: #121212; padding: 20px; border-bottom: 2px solid #f1c40f;">
        <h1 style="color: #f1c40f; font-family: Arial, sans-serif; font-size: 36px;">Add Workout</h1>
    </header>

    <main>
        <section>
            <style>
                .card {
                    transition: transform 0.3s ease, box-shadow 0.3s ease; /* Smooth transition */
                }

                .card:hover {
                    transform: scale(1.05); /* Slightly enlarge the card */
                    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2); /* Add a shadow for depth */
                }
            </style>

            <!-- First Dropdown for Filter -->
            <label for="searchBy">Search By:</label>
            <select id="searchBy" class="dropdown">
                <option value="" disabled selected>Select a Filter</option>
                <option value="type">Type</option>
                <option value="muscle">Muscle</option>
                <option value="difficulty">Difficulty</option>
            </select>

            <!-- Second Dropdown for Options -->
            <label for="filterOptions">Select an Option:</label>
            <select id="filterOptions" class="dropdown" disabled>
                <option value="" disabled selected>Options will populate here...</option>
            </select>

            <!-- Submit Button -->
            <button id="searchButton" disabled>Search</button>

            <!-- Search Results Grid -->
            <div id="searchResults" class="row">
                <!-- Results will appear here -->
            </div>
        </section>
    </main>

    <script>
        // JavaScript logic remains unchanged from the earlier example
        const options = {
            type: [
                "cardio",
                "olympic_weightlifting",
                "plyometrics",
                "powerlifting",
                "strength",
                "stretching",
                "strongman",
            ],
            muscle: [
                "abdominals",
                "abductors",
                "adductors",
                "biceps",
                "calves",
                "chest",
                "forearms",
                "glutes",
                "hamstrings",
                "lats",
                "lower_back",
                "middle_back",
                "neck",
                "quadriceps",
                "traps",
                "triceps",
            ],
            difficulty: ["beginner", "intermediate", "expert"],
        };

        const searchByDropdown = document.getElementById("searchBy");
        const filterOptionsDropdown = document.getElementById("filterOptions");
        const searchButton = document.getElementById("searchButton");
        const searchResultsDiv = document.getElementById("searchResults");

        searchByDropdown.addEventListener("change", function () {
            const selectedFilter = this.value;

            if (!selectedFilter) {
                filterOptionsDropdown.innerHTML =
                    '<option value="" disabled selected>No options available.</option>';
                filterOptionsDropdown.disabled = true;
                searchButton.disabled = true;
                return;
            }

            const selectedOptions = options[selectedFilter] || [];
            filterOptionsDropdown.innerHTML =
                '<option value="" disabled selected>Select an option</option>';
            selectedOptions.forEach((option) => {
                const optionElement = document.createElement("option");
                optionElement.value = option;
                optionElement.textContent = option;
                filterOptionsDropdown.appendChild(optionElement);
            });

            filterOptionsDropdown.disabled = false;
        });

        filterOptionsDropdown.addEventListener("change", function () {
            searchButton.disabled = !this.value;
        });

        searchButton.addEventListener("click", async function () {
            const filterType = searchByDropdown.value;
            const filterValue = filterOptionsDropdown.value;

            if (!filterType || !filterValue) {
                alert("Please select a filter and an option.");
                return;
            }

            try {
                const response = await fetch(
                    `/api/workouts?${filterType}=${encodeURIComponent(filterValue)}`
                );
                const results = await response.json();

                searchResultsDiv.innerHTML = "";
                if (results.length === 0) {
                    searchResultsDiv.innerHTML = "<p>No results found.</p>";
                    return;
                }

                results.forEach((workout) => {
                    const workoutElement = document.createElement("div");
                    workoutElement.classList.add("col-lg-4", "mb-4"); // Bootstrap grid column class
                    workoutElement.innerHTML = `
                        <div class="card" style="width: 100%; height: 100%;">
                            <div class="card-body">
                                <h5 class="card-title">${workout.name}</h5>
                                <p><strong>Muscle:</strong> ${workout.muscle}</p>
                                <p><strong>Type:</strong> ${workout.type}</p>
                                <p><strong>Difficulty:</strong> ${workout.difficulty}</p>
                                <p><strong>Instructions:</strong> ${workout.instructions}</p>
                            </div>
                            <div class="card-footer text-left">
                                <button class="btn btn-warning save-workout-button" data-name="${workout.name}">Add Workout</button>
                            </div>
                        </div>
                    `;
                    searchResultsDiv.appendChild(workoutElement);
                });
            } catch (error) {
                console.error("Error fetching workouts:", error);
                searchResultsDiv.innerHTML =
                    "<p>Failed to fetch workouts. Please try again later.</p>";
            }
        });
            searchResultsDiv.addEventListener("click", async (event) => {
            if (event.target.classList.contains("save-workout-button")) {
                const workoutName = event.target.getAttribute("data-name");
                if (!workoutName) {
                    alert("Workout name is missing!");
                    return;
                }

                const workoutData = {
                    name: workoutName,
                    duration: '00:10:00', // Example duration
                };

                try {
                    const response = await fetch("/add-workout", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({workoutData}),
                    });

                    if (response.ok) {
                        alert("Workout saved successfully!");
                    } else {
                        alert("Failed to save workout. Please try again.");
                    }
                } catch (error) {
                    console.error("Error saving workout:", error);
                    alert("An unexpected error occurred.");
                }
            }
        });

            function stopTimer() {
                clearInterval(timerInterval);
                timerDisplay.textContent = formatTime(elapsedTime);
                isPaused = true; // Ensure timer is paused
            }

            function resetForm() {
                document.getElementById('workoutName').value = '';
                timerDisplay.textContent = '00:00:00';
                elapsedTime = 0;
                isPaused = false;
            }

            function formatTime(seconds) {
                const hours = Math.floor(seconds / 3600);
                const minutes = Math.floor((seconds % 3600) / 60);
                const secs = seconds % 60;
                return `${pad(hours)}:${pad(minutes)}:${pad(secs)}`;
            }

            function pad(num) {
                return num.toString().padStart(2, '0');
            }
    </script>
    
    {{!-- for the footer to render in the correct spot. --}}
    <div style="height: 10000px; background-color: white; margin-top: 20px;"></div>
</body>